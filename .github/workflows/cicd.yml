name: CI/CD
on:
  push:
    branches:
    - master
    tags:
    - '*'
  pull_request:
  workflow_dispatch:
env:
  PIP_UPGRADE: "true"  # always upgrade to latest version
  PIP_UPGRADE_STRATEGY: "eager"  # upgrade all dependencies
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    name: test on Python ${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v2
    - name: Install system packages
      run: |
        sudo apt-get install \
          libvoikko1 \
          voikko-fi
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: setup.py
    - name: Install Python dependencies
      run: |
        python -m pip install pip setuptools wheel
        python -m pip install .[dev]
        python -m nltk.downloader punkt
        # Selectively install the optional dependencies for some Python versions
        # Install the optional neural network dependencies (TensorFlow and LMDB)
        # - except for one Python version (3.8) so that we can test also without them
        if [[ ${{ matrix.python-version }} != '3.8' ]]; then pip install .[nn]; fi
        # Install the optional Omikuji and YAKE dependencies
        # - except for one Python version (3.8) so that we can test also without them
        if [[ ${{ matrix.python-version }} != '3.8' ]]; then pip install .[omikuji,yake]; fi
        # Install the optional fastText dependencies for Python 3.8 only
        if [[ ${{ matrix.python-version }} == '3.8' ]]; then pip install .[fasttext]; fi
        # Install the optional spaCy dependencies for Python 3.8 only
        if [[ ${{ matrix.python-version }} == '3.8' ]]; then
          pip install .[spacy]
          # download the small English pretrained spaCy model needed by spacy analyzer
          python -m spacy download en_core_web_sm --upgrade-strategy only-if-needed
        fi
        # For Python 3.7
        # - voikko and pycld3 dependencies
        if [[ ${{ matrix.python-version }} == '3.7' ]]; then python -m pip install .[voikko,pycld3]; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest --cov=./
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1

  publish-docker-latest:
    name: publish latest Docker image
    needs: test
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - name: Login to Quay.io
      uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7  # v1.14.1
      with:
        registry: quay.io
        username: ${{ secrets.YHTEENTOIMIVUUSPALVELUT_QUAY_IO_USERNAME }}
        password: ${{ secrets.YHTEENTOIMIVUUSPALVELUT_QUAY_IO_PASSWORD }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@e5622373a38e60fb6d795a4421e56882f2d7a681  # v3.6.2
      with:
        images: quay.io/natlibfi/annif
        tags: |
          latest
    - name: Build and push to Quay.io
      uses: docker/build-push-action@7f9d37fa544684fb73bfe4835ed7214c255ce02b  # v2.9.0
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  publish-release:
    name: publish release
    needs: test
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        cache: pip
        cache-dependency-path: setup.py
    - name: Build distribution
      run: |
        python -m pip install wheel
        python setup.py sdist bdist_wheel
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
    - name: Login to Quay.io
      uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7  # v1.14.1
      with:
        registry: quay.io
        username: ${{ secrets.YHTEENTOIMIVUUSPALVELUT_QUAY_IO_USERNAME }}
        password: ${{ secrets.YHTEENTOIMIVUUSPALVELUT_QUAY_IO_PASSWORD }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@e5622373a38e60fb6d795a4421e56882f2d7a681  # v3.6.2
      with:
        images: quay.io/natlibfi/annif
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    - name: Build and push to Quay.io
      uses: docker/build-push-action@7f9d37fa544684fb73bfe4835ed7214c255ce02b  # v2.9.0
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
