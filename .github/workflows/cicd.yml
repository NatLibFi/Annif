name: CI/CD
on:
  push:
    branches:
    - master
    tags:
    - '*'
  pull_request:
  workflow_dispatch:
env:
  PIPX_HOME: "/home/runner/.cache/pipx"
  PIPX_BIN_DIR: "/home/runner/.local/bin"
  POETRY_VERSION: "1.2.0"
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    name: test on Python ${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v3
    - name: Install system packages
      run: |
        sudo apt-get install \
          libvoikko1 \
          voikko-fi
    - name: Load cached Poetry installation and repositories info
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pipx/venvs
          ~/.local/bin
          ~/.cache/pypoetry/cache/repositories
        key: poetry-installation-and-repos-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}
    - name: Install Poetry
      run: |
        pipx install poetry==$POETRY_VERSION
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@b55428b1882923874294fa556849718a1d7f2ca5  # v4.2.0
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
        cache-dependency-path: 'pyproject.toml'
    - name: Install Python dependencies
      run: |
        # Selectively install the optional dependencies for some Python versions
        # For Python 3.8:
        if [[ ${{ matrix.python-version }} == '3.8' ]]; then
          poetry install -E "nn omikuji yake voikko pycld3";
        fi
        # For Python 3.9:
        if [[ ${{ matrix.python-version }} == '3.9' ]]; then
          poetry install -E "fasttext spacy";
          # download the small English pretrained spaCy model needed by spacy analyzer
          poetry run python -m spacy download en_core_web_sm --upgrade-strategy only-if-needed
        fi
        # For Python 3.10:
        if [[ ${{ matrix.python-version }} == '3.10' ]]; then
          poetry install -E "nn omikuji yake";
        fi
        poetry run python -m nltk.downloader punkt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        poetry run pytest --cov=./ --cov-report xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378  # v3.1.0

  publish-docker-latest:
    name: publish latest Docker image
    needs: test
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - name: Login to Quay.io
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b  # v2.0.0
      with:
        registry: quay.io
        username: ${{ secrets.YHTEENTOIMIVUUSPALVELUT_QUAY_IO_USERNAME }}
        password: ${{ secrets.YHTEENTOIMIVUUSPALVELUT_QUAY_IO_PASSWORD }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a  # v4.0.1
      with:
        images: quay.io/natlibfi/annif
        tags: |
          latest
    - name: Build and push to Quay.io
      uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8  # v3.0.0
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  publish-release:
    name: publish release
    needs: test
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v3
    - name: Load cached Poetry installation and repositories info
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pipx/venvs
          ~/.local/bin
          ~/.cache/pypoetry/cache/repositories
        key: poetry-installation-and-repos-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}
    - name: Install Poetry
      run: |
        pipx install poetry==$POETRY_VERSION
    - name: Set up Python 3.9
      uses: actions/setup-python@b55428b1882923874294fa556849718a1d7f2ca5  # v4.2.0
      with:
        python-version: '3.9'
        cache: 'poetry'
        cache-dependency-path: 'pyproject.toml'
    - name: Build and publish distribution to PyPI
      env:
        POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
        POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        poetry publish --build

    - name: Login to Quay.io
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b  # v2.0.0
      with:
        registry: quay.io
        username: ${{ secrets.YHTEENTOIMIVUUSPALVELUT_QUAY_IO_USERNAME }}
        password: ${{ secrets.YHTEENTOIMIVUUSPALVELUT_QUAY_IO_PASSWORD }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a  # v4.0.1
      with:
        images: quay.io/natlibfi/annif
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    - name: Build and push to Quay.io
      uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8  # v3.0.0
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
